name: porcupine-core
version: 0.1.0.1
synopsis: Express portable, composable and reusable data tasks and pipelines
description: |
  porcupine is centered around the PTask datatype, which represents a
  computation that will request access to some resources (both in read and write
  modes) and require some options (parameters, with docstrings and default
  values). PTasks are composable both sequentially and in parallel, into a
  pipeline of tasks. The resources and parameters are organized in a tree which
  will be automatically exposed to the outside world. This makes the pipeline
  self-documented, and makes it so any option or file required at some point by
  any task can be visualized and set or remapped (via a combination of a YAML or
  JSON config file and command-line arguments) before the pipeline will
  run. That means that the PTasks are completely agnostic of their data inputs,
  and that new data sources can be added without having to change any of the
  tasks' logic or even their types. This is done via the LocationAccessor
  typeclass. `porcupine-core` provides only access to local files (via
  resourcet), other location accessors will be in separate packages. See for
  instance the <https://hackage.haskell.org/package/porcupine-http> package to
  access HTTP urls. PTasks also provide caching thanks to the funflow
  package. See the README at <https://github.com/tweag/porcupine#README.md> and
  the examples in `porcupine-core` package.
maintainer: Yves Par√®s <yves.pares@tweag.io>
github: tweag/porcupine
homepage: https://tweag.github.io/porcupine/
category: Data, Arrows, Combinators, Control, Pipes, Streaming, Numerical, JSON
copyright: 2018 EURL Tweag, NovaDiscovery

ghc-options: -Wall

dependencies:
  - base >= 4.10 && < 5
  - aeson
  - aeson-pretty
  - attoparsec
  - binary
  - binary-orphans
  - bytestring
  - cassava
  - clock
  - conduit
  - containers
  - contravariant
  - data-default
  - deepseq
  - directory
  - docrecords == 0.1.*
  - filepath
  - formatting
  - foldl
  - funflow >= 1.5.0
  - hashable
  - katip == 0.8.*
  - lens
  - monad-control
  - mtl
  - optparse-applicative
  - path
  - profunctors
  - reader-soup == 0.1.*
  - resourcet
  - safe-exceptions
  - store
  - streaming
  - streaming-bytestring
  - streaming-conduit
  - streaming-utils
  - template-haskell
  - temporary
  - text
  - transformers
  - transformers-base
  - unix
  - unliftio-core
  - unordered-containers
  - url
  - zlib
  - vector
  - vinyl
  - yaml

library:
  source-dirs: src

flags:
  useMonadBayes:
    manual: True
    default: False  # monad-bayes isn't on Hackage

tests:
  tasty-tests:
    source-dirs: test
    main: Tests.hs
    dependencies:
      - porcupine-core
      - tasty
      - tasty-hunit
      - tasty-hedgehog
      - hedgehog
    
executables:
  example0:
    source-dirs: examples/example0
    main: Example0.hs
    dependencies:
      - porcupine-core
  example0.1:
    source-dirs: examples/example0.1
    main: Example0_1.hs
    dependencies:
      - porcupine-core
  example1:
    source-dirs: examples/example1
    main: Example1.hs
    dependencies:
      - porcupine-core
  example2:
    source-dirs: examples/example2
    main: Example2.hs
    dependencies:
      - porcupine-core
  example-radon:
    when:
      condition: flag(useMonadBayes)
      then:
        buildable: True
      else:
        buildable: False
    source-dirs: examples/example-radon
    main: ExampleRadon.hs
    dependencies:
      - porcupine-core
      - docrecords
      - aeson
      - unordered-containers
      - text
      - log-domain
      - monad-bayes
      - hvega
